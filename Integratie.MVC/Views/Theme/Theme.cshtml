@model Integratie.Domain.Entities.Subjects.Theme
@{
    ViewBag.Title = "Theme";
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto'>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<!--
<style>
    html, body, h1, h2, h3, h4, h5, h6 {
        font-family: "Roboto", sans-serif
    }
</style>
<div class="jumbotron" style="background-image: url(@Model.GetImageSrc())">
    <h2>@Model.Name</h2>
</div>
<div class="w3-content w3-margin top" style="max-width:1400px;position:center">
    <div class="w3-row-padding">
        <div class="w3-third w3-container">
            <div class="w3-white w3-text-grey w3-card-4">

                <h2 class="tesla-title">Top 5 politici die betrokken zijn in dit thema</h2>
                @foreach (var topPerson in Model.TopPersonsList)
                {
                    <a href="@Url.Action("Persoon", "Subject", new { Full_Name = topPerson })">
                        <h5>@topPerson</h5>
                    </a>
                }
            </div>
        </div>
        <div class="w3-third w3-container">
            <div class="w3-white w3-text-grey w3-card-4">
                <h2 class="tesla-title">Top 5 Partijen die betrokken zijn in dit thema</h2>
                @foreach (var topOrg in Model.TopOrganisationsList)
                {
                    <h5>@topOrg</h5>
                }
            </div>
        </div>
        @if (Model.Stories != null)
        {
            foreach (var story in Model.Stories)
            {
                <div class="w3-third w3-container">
                    <div class="w3-white w3-text-grey w3-card-4">

                        <h1 class="tesla-story-title tesla-title">@story.Titel</h1>

                        <p>@story.StoryString</p>
                        @if (story.Link != null)
                        {
                            <a href="@story.Link">Link</a>

                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

    -->
<div class="TeslaThemesContainer">
    <a href="@Url.Action("Index", "Theme")">Bekijk alle Thema's</a>
    <div class="TeslaCenterContainer">
        <div class="TeslaThemeDetailFoto col-centered">
            <div href="" class="teslaThemeCarcContainer" style="background-image:url('@Model.GetImageSrc()')">
                <div class="TeslaThemeCardText"> @Model.Name</div>
            </div>
        </div>
        @{
            if (Model.TrendIndex > 0)
            {
                <span class="teslaSingleThemeTrendInfo positive">@(Model.TrendIndex)% Trending</span>
            }
            else
            {
                <span class="teslaSingleThemeTrendInfo negative">@(Model.TrendIndex)% Trending</span>
            }
        }
        <h1 class="teslaThemeTitle">Top gerelateerde gegevens</h1>
        <div class=" TeslaThemeInfo">
            <h2 class="tesla-title">Politici</h2>
            @foreach (var topPerson in Model.TopPersonsList)
            {
                <a href="@Url.Action("Persoon", "Subject", new { Full_Name = topPerson })">
                    <h5>@topPerson</h5>
                </a>
            }
        </div>
        <div class=" TeslaThemeInfo">
            <h2 class="tesla-title">Partijen</h2>
            @foreach (var topOrg in Model.TopOrganisationsList)
            {
                <a>
                    <h5>@topOrg</h5>
                </a>
            }
        </div>
        <br/>
        <div class="TeslaThemeWoordenGrafiek">
            <h2 class="tesla-title">KernWoorden</h2>

            <canvas id="woordGrafiek"></canvas>
        </div>

        <div class="TeslaThemeWoordenGrafiek">
            <h2 class="tesla-title">KernWoorden</h2>

            <canvas id="woordGrafiek2"></canvas>
        </div>

    </div>
</div>

<script>
    @{
        var x = Model.TermMentions.Select(t => t.Term);
        if (Model.TermMentions != null & Model.TermMentions.Count > 0)
        {
            <text>
            var ctx = document.getElementById("woordGrafiek").getContext("2d");
            var chart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                            labels: [@{
                                foreach (string s in x)
                                {
                                <text>"@(s)",</text>
                                }
                            }],
                        datasets: [{
                                data: [@(Model.TermMentions.Select(t => t.Count.ToString()).Aggregate((a, b) => a + ", " + b))],
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)'
                            ]
                            }
                        ]
                }
            });
            </text>
                                }
        }
</script>
<script>
    @{
        if (Model.TermMentions != null & Model.TermMentions.Count > 0)
        {
            <text>
    var ctx = document.getElementById("woordGrafiek2").getContext("2d");
    var chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [@{
                foreach (string s in x)
                {
                    <text>"@(s)",</text>
                }
                    }],
            datasets: [{
                label: '# of Votes',
                data: [@(Model.TermMentions.Select(t => t.Count.ToString()).Aggregate((a, b) => a + ", " + b))],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
    });
    </text>
                    }
                }
</script>
