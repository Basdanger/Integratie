@using Integratie.Domain.Entities.Dashboard;
@using Integratie.Domain.Entities.Graph;
@using Newtonsoft.Json;
@model List<DashboardItem>
@{int counter = 0; }
<link href="@Url.Content("~/Content/demo.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/jquery.gridster.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/jquery.gridster.js")"></script>

<!-- MARNICK CHART-->
<!-- Jan -->
<div class="gridster" style="width:100%;">
    <ul id="gridul" style="width:100%; margin:0; padding:0;">

    </ul>
</div>
<button id="js" class="btn btn-primary">RandomResize</button>
<button id="js2" class="btn btn-primary">add</button>
<button id="js3" class="btn btn-primary">Open Popup</button>
<button id="serialize" class="btn btn-primary">Serialize</button>

<div class="tesla-popup">
    <div class="tesla-popup-window">
        <div class="tesla-popup-header">
            <span style="float:left;margin-left:10px;margin-top:3px;">New Graph</span>
            <button id="close" style="float:right; margin-top:-3px; color:darkred" type="button" class="btn btn-link"><i class="fa fa-fw fa-close tesla-bar-icon"></i></button>
        </div>
        <div class="tesla-popup-container">
            @Html.Partial("~/Views/Graph Inits/_BarChart.cshtml");
            </div>
        </div>
    </div>
<script>
    $(document).ready(function () {
        $('#js3').on('click', function () {
            $('.tesla-popup').addClass('open');
            $('.tesla-popup-window').addClass('open');
            console.log('clicked');
        });
        $('#close').on('click', function () {
            $('.tesla-popup').removeClass('open');
            $('.tesla-popup-window').removeClass('open');
            console.log('clicked');
        });
    });
</script>
<script type="text/javascript">
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
</script>
<script type="text/javascript">
    var gridster;
    $(document).ready(function () { console.log("Doc Ready");});
    $(function () {
        console.log("function execute");
        gridster = $(".gridster ul").gridster({
            widget_base_dimensions: [100, 100],
            widget_margins: [5, 5],
            helper: 'clone',
            resize: {
                enabled: true
            }
        }).data('gridster');

        @foreach (DashboardItem x in Model)
        {
            <text>
        var widget = ['<li data-id="' + @x.Id +'" data-graphid="' + @x.Graph.GraphId +  '"><canvas id="myChart' + @x.Id +'" style="max-height:100%;"></canvas></li>', @x.X_Size, @x.Y_Size,@x.Column,@x.Row]
            gridster.add_widget.apply(gridster, widget);
            </text>
            x.GridId = counter;
            counter++;
        }
        $('#js').on('click', function () {
            gridster.resize_widget(gridster.$widgets.eq(getRandomInt(0, 9)),
                getRandomInt(1, 4), getRandomInt(1, 4));
            console.log("clicked");
        });

        $('#js2').on('click', function () {
            var widget = ['<li data-row="1" data-col="1" data-sizex="2" data-sizey="2"><canvas id="myChart" style="max-height:100%;"></canvas></li>', 1, 2];
            gridster.add_widget.apply(gridster, widget)});
        //$(".gridster ul").gridster(options).width("auto");

    });
</script>
<!-- Serializer-->
<script type="text/javascript">
    $("#serialize").on("click", function () {
        var s = [];
        $("#gridul li").each(function (index) {
            var o = {
                Id: $(this).attr('data-id'),
                Column: $(this).attr('data-col'),
                Row: $(this).attr('data-row'),
                X_Size: $(this).attr('data-sizex'),
                Y_Size: $(this).attr('data-sizey'),
                GraphId: $(this).attr('data-graphid')
                
            };
            s.push(o);
            console.log(index + ": " + $(this).attr('data-id'));
        })

        s = (JSON.stringify(s));
        console.log(s);
         $.ajax({
                type: "POST",
                url: '@Url.Action("Index","Home")',
                data: s,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function () {
                    alert("Succes")
                },
                error: function (ex) {
                    alert(ex.statusText);
                }
            });

        var JuanObj

    })
</script>
<!--Marnick-->
<script>
    @for (int y = 0; y < counter; y++) {

        foreach(DashboardItem dbi in Model)
        {
            if( dbi.GridId == y)
            {

                if(dbi.Graph.GetType() == typeof(BarChartGraph))
                {
                    BarChartGraph BCG = (BarChartGraph)dbi.Graph;
                     <text>
                    $(function () {
                            var ctx = document.getElementById("myChart" + @dbi.Id).getContext('2d');
                            var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                                labels: @Html.Raw(JsonConvert.SerializeObject(BCG.Values.Keys.ToList())),
                datasets: [{
                                    label: '# of Votes',
                    data: @Html.Raw(JsonConvert.SerializeObject(BCG.Values.Values.ToList())),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                                scales: {
                                    yAxes: [{
                                        ticks: {
                                            beginAtZero: true
                                        }
                                    }]
                }
                            }
                        });
    });
    </text>
                }
            }
        }

    }
</script>



