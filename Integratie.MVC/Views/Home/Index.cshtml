@using Integratie.Domain.Entities.Dashboard;
@using Integratie.Domain.Entities.Graph;
@using Newtonsoft.Json;
@model List<DashboardItem>
@{int counter = 0; }


<!-- MARNICK CHART-->
<!-- Jan -->
<div class="gridsterMenu">
    <span>Dashboard</span>

    <i class="fa fa-fw fa-wrench teslaDashboardEdit"></i>
    <i class="fa fa-fw fa-plus teslaDashboardAdd"></i>
</div>
<div class="gridster">
    <ul id="gridul" style="margin:0; padding:0; position:relative;"></ul>
</div>

<div class="tesla-popup">
    <div class="tesla-popup-window">
        <div class="tesla-popup-header">
            <span style="float:left;margin-left:10px;margin-top:3px;">New Graph</span>
            <button id="close" style="float:right; margin-top:-3px; color:darkred" type="button" class="btn btn-link"><i class="fa fa-fw fa-close tesla-bar-icon"></i></button>
        </div>
        <div class="tesla-popup-container">
            @Html.Partial("~/Views/Graph Inits/_BarChart.cshtml")
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $('#js3').on('click', function () {
            $('.tesla-popup').addClass('open');
            $('.tesla-popup-window').addClass('open');
            console.log('clicked');
        });
        $('#close').on('click', function () {
            $('.tesla-popup').removeClass('open');
            $('.tesla-popup-window').removeClass('open');
            console.log('clicked');
        });
    });
</script>
<script type="text/javascript">
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
</script>
<script type="text/javascript">
    var gridster;
    var enabled = false;
    $(document).ready(function () { console.log("Doc Ready");});
    $(function () {
        console.log("function execute");
        gridster = $(".gridster ul").gridster({
            widget_base_dimensions: [100, 100],
            widget_margins: [5, 5],
            autogrow_cols:true,
            helper: 'clone',
            resize: {
                enabled: true
            }
        }).data('gridster');
        gridster.disable();
        gridster.disable_resize();

        @foreach (DashboardItem x in Model){

            if (x.Graph.GraphType == GraphType.Barchart) {
                <text>
                var widget = ['<li data-id="' + @x.Id +'" data-graphid="' + @x.Graph.GraphId +  '"><div class="TeslaGraphDelete hide">X</div><canvas id="myChart' + @x.Id +'" style="max-height:100%;"></canvas>'
                + '<div class="TeslaBarInformation">'
                +'<span class="teslaTag">@x.Graph.CalcType</span>'
                @{
                    if(x.Graph.PersonFilter != "")
                    {
                        foreach(string ss in x.Graph.PersonFilter.Split(',').Select(s => s.Trim()))
                        {
                        <text>+ '<span class="teslaTag">@ss</span>'</text>
                        }
                    }

                    if(x.Graph.GenderFilter != GenderFilter.Both)
                    {
                        <text>+ '<span class="teslaTag">@x.Graph.GenderFilter</span>'</text>
                    }

                    if(x.Graph.AgeFilter != AgeFilter.Both)
                    {
                        <text>+ '<span class="teslaTag">@x.Graph.AgeFilter</span>'</text>
                    }

                }
                + '<span class="teslaTag"> @{if (x.Graph.PeriodSort == PeriodSort.Fixed) { <text>@x.Graph.StartDate.ToShortDateString() - @x.Graph.EndDate.ToShortDateString()</text> } else {<text> @x.Graph.PeriodLength.ToString() Days</text> } } '
                + '</li>', @x.X_Size, @x.Y_Size,@x.Column,@x.Row]
                gridster.add_widget.apply(gridster, widget);
                </text>
            }
            if (x.Graph.GraphType == GraphType.Single)
            {
                <text>
                var widget = ['<li data-id="' + @x.Id + '" data-graphid="' + @x.Graph.GraphId + '">'
                +'<div class="TeslaSingleInfoCalculation">@x.Graph.CalcType</div>'
                + '<div class="TeslaGraphDelete hide">X</div>'
                + '<div class="TeslaSingleContainer">'
                + '<p class="TeslaSingleGraph">' + @x.Graph.SingleValue + '</p>'
                + '<div class="TeslaSingleValueInformation">'
                @{
                    if(x.Graph.PersonFilter != "")
                    {
                        foreach(string ss in x.Graph.PersonFilter.Split(',').Select(s => s.Trim()))
                        {
                        <text>+ '<span class="teslaTag">@ss</span>'</text>
                        }
                    }

                    if(x.Graph.GenderFilter != GenderFilter.Both)
                    {
                        <text>+ '<span class="teslaTag">@x.Graph.GenderFilter</span>'</text>
                    }

                    if(x.Graph.AgeFilter != AgeFilter.Both)
                    {
                        <text>+ '<span class="teslaTag">@x.Graph.AgeFilter</span>'</text>
                    }

                }
                + '<span class="teslaTag"> @{if (x.Graph.PeriodSort == PeriodSort.Fixed) { <text>@x.Graph.StartDate.ToShortDateString() - @x.Graph.EndDate.ToShortDateString()</text> } else {<text> @x.Graph.PeriodLength.ToString() Days</text> } } '
                + '</span></div ></div></li > ', @x.X_Size, @x.Y_Size, @x.Column, @x.Row]
                gridster.add_widget.apply(gridster, widget);

                </text>

            }
            if (x.Graph.GraphType == GraphType.Linechart)
            {
                <text>
                var widget = ['<li data-id="' + @x.Id +'" data-graphid="' + @x.Graph.GraphId +  '"><div class="TeslaGraphDelete hide">X</div><canvas id="myChart' + @x.Id +'" style="max-height:100%;"></canvas>'
                + '<div class="TeslaBarInformation">'
                +'<span class="teslaTag">@x.Graph.CalcType</span>'
                @{
                    if(x.Graph.PersonFilter != "")
                    {
                        foreach(string ss in x.Graph.PersonFilter.Split(',').Select(s => s.Trim()))
                        {
                        <text>+ '<span class="teslaTag">@ss</span>'</text>
                        }
                    }

                    if(x.Graph.GenderFilter != GenderFilter.Both)
                    {
                        <text>+ '<span class="teslaTag">@x.Graph.GenderFilter</span>'</text>
                    }

                    if(x.Graph.AgeFilter != AgeFilter.Both)
                    {
                        <text>+ '<span class="teslaTag">@x.Graph.AgeFilter</span>'</text>
                    }

                }
                + '<span class="teslaTag"> @{if (x.Graph.PeriodSort == PeriodSort.Fixed) { <text>@x.Graph.StartDate.ToShortDateString() - @x.Graph.EndDate.ToShortDateString()</text> } else {<text> @x.Graph.PeriodLength.ToString() Days</text> } } '
                + '</li>', @x.X_Size, @x.Y_Size,@x.Column,@x.Row]
                gridster.add_widget.apply(gridster, widget);
                </text>
            }

                x.GridId = counter;
                counter++;
         }
            $('.teslaDashboardEdit').on('click', function () {
                if (enabled) {
                    $(this).removeClass('selected');
                    gridster.disable();
                    gridster.disable_resize();
                    $(".TeslaGraphDelete").addClass("hide");
                    TeslaSerialize();
                }
                else {
                    $(this).addClass('selected');
                    gridster.enable();
                    gridster.enable_resize();
                    $(".TeslaGraphDelete").removeClass("hide");
                }
                enabled = !enabled;
            })
            $('.teslaDashboardAdd').on('click', function () {
                $('.tesla-popup').addClass('open');
                $('.tesla-popup-window').addClass('open');
            })
        $('#js').on('click', function () {
                gridster.resize_widget(gridster.$widgets.eq(getRandomInt(0, 9)),
                    getRandomInt(1, 4), getRandomInt(1, 4));
                console.log("clicked");
        });

        $('#js2').on('click', function () {
                enabled = !enabled;
                if (enabled) {
                    gridster.enable();
                    gridster.enable_resize();
                $(".TeslaGraphDelete").removeClass("hide");
                }
                else {
                    gridster.disable();
                    gridster.disable_resize();
                $(".TeslaGraphDelete").addClass("hide");

                }
            });
        $('.TeslaGraphDelete').on('click', function () {
            var o = {
                Id: $(this).parent().attr('data-id'),
                Column: $(this).parent().attr('data-col'),
                Row: $(this).parent().attr('data-row'),
                X_Size: $(this).parent().attr('data-sizex'),
                Y_Size: $(this).parent().attr('data-sizey'),
                GraphId: $(this).parent().attr('data-graphid')

            };
            o = (JSON.stringify(o));
            console.log(o);
            $.ajax({
            type: "POST",
            url: '@Url.Action("RemoveDashboardItem", "Home")',
            data: o,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function () {
                //alert("Succes")
            },
            error: function (ex) {
                //alert(ex.statusText);
            }
        });
            $(this).parent()
                gridster.remove_widget($(this).parent());
            })
    });
</script>
<!-- Serializer-->
<script type="text/javascript">
    function TeslaSerialize() {
        var s = [];
        $("#gridul li").each(function (index) {
            var o = {
                Id: $(this).attr('data-id'),
                Column: $(this).attr('data-col'),
                Row: $(this).attr('data-row'),
                X_Size: $(this).attr('data-sizex'),
                Y_Size: $(this).attr('data-sizey'),
                GraphId: $(this).attr('data-graphid')

            };
            s.push(o);
            console.log(index + ": " + $(this).attr('data-id'));
        })

        s = (JSON.stringify(s));
        console.log(s);
        $.ajax({
            type: "POST",
            url: '@Url.Action("Index","Home")',
            data: s,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function () {
                //alert("Succes")
            },
            error: function (ex) {
                //alert(ex.statusText);
            }
        });

        var JuanObj

    }
</script>
<!--Marnick-->
<script>
    @for (int y = 0; y < counter; y++)
    {

        foreach (DashboardItem dbi in Model)
        {
            if (dbi.Graph.GraphType == GraphType.Barchart)
            {
                             <text>
                            $(function () {
                                    var ctx = document.getElementById("myChart" + @dbi.Id).getContext('2d');
                                    var myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                                        labels: @Html.Raw(JsonConvert.SerializeObject(dbi.Graph.BarValues.Keys.ToList())),
                        datasets: [{
                                            label: '# of tweets',
                            data: @Html.Raw(JsonConvert.SerializeObject(dbi.Graph.BarValues.Values.ToList())),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                                        scales: {
                                            yAxes: [{
                                                ticks: {
                                                    beginAtZero: true
                                                }
                                            }]
                        }
                                    }
                                });
                });
                </text>
            }
            if (dbi.Graph.GraphType == GraphType.Linechart)
            {

                int ii = 0;
                            <text>
                            var colors = [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ];
                            $(function () {
                                var ctx = document.getElementById("myChart" + @dbi.Id).getContext('2d');
                                var chart = new Chart(ctx, {
                                    type: 'line',
                                    data: {
                                        @{
                                        DateTime dt = dbi.Graph.StartDate;
                                            <text>labels:[ </text>while(dt < dbi.Graph.EndDate.AddDays(dbi.Graph.IntervalSize))
                                            {
                                                <text>"@dt.ToShortDateString()",</text>
                                                dt = dt.AddDays(dbi.Graph.IntervalSize);
                                            }
    }] 
                                    },
                                    options: {
                                        scales: {
                                            yAxes: [{
                                                ticks: {
                                                    beginAtZero: true
                                                }
                                            }]
                                        },
                                        tooltips: {
                                            mode: 'index'
                                        }
                                    }
                                });
                                chart.data.datasets = [
                    @foreach (var item in dbi.Graph.LineValues)
                    {
                            <text>
                                {

                                    label: '@item.Key',
                                    data:  @Html.Raw(JsonConvert.SerializeObject(item.Value)),
                                    backgroundColor: colors[@ii],
                                    borderColor: colors[@ii],
                                    borderWidth: 2,
                                    fill: false
                                },
                    </text>
                        ii++;
                    }
                        ];

                        chart.update()
                    });
                </text>
            }
        }
    }


</script>



